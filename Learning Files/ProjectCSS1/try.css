:root {
    font-size: 16px;
    --grid-gap: 1rem;
}
.basic-grid {
    display: grid;
    gap: var(--grid-gap);
    /* 
        auto-fit: tell grid to calc num of rows and columns on the fly
        auto-fill: create additional columns when there is space, whereas auto-fit stretches existing
        repeat by auto num of times, min size is 240px, max size is 1frm
        i.e. equal sizing that can increase 
    */
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
}

/* -------------------------------------------------- */

.photo-grid {
    display: grid;
    gap: var(--grid-gap);
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    grid-auto-rows: 240px;
}
/* only card tall and card wide if screen is larger than 700 px */
@media screen and (min-width: 700px) {
    .card-tall {
        grid-row: span 2 / auto; /* start here, end here || span 2 rows, and end wherever */
        /* implicitly -- start wherever, span2 rows, end wherever */
    
        /* explicitly */
        /* grid-row: 1 / 4  -- start at horizontal line 1 and end at horizontal line 4*/
    }
    .card-wide {
        /* similar to card-tall */
        grid-column: span 2 /auto;
    }
}

/* -------------------------------------------------- */

.animated-grid {
    height: 85vh; /* viewport height relative unit, i.e. 85% of viewport height */
    display: grid;
    gap: var(--grid-gap);
    grid-template-areas: 
        "a b c d"
        "l ðŸ”¥ ðŸ”¥ e"
        "k ðŸ”¥ ðŸ”¥ f"
        "j i h g";
    grid-template-rows: repeat(4, 25%);
    grid-template-columns: 240px auto auto 240px;
    --stagger-delay: 100ms;
}

@keyframes cardEntrance {
    from {
        opacity: 0;
        transform: scale(0.3);
        filter: hue-rotate(180deg);
    }
    to {
        opacity: 1;
        transform: scale(1);
        filter: hue-rotate(0deg);
    }
}

.animated-grid .grid-item {
    background-color: rgb(36, 243, 147);
    animation: cardEntrance 700ms ease-out;
    animation-fill-mode: backwards;
}

.animated-grid .grid-item:nth-child(1) {grid-area: a; animation-delay: calc(1 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(2) {grid-area: b; animation-delay: calc(2 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(3) {grid-area: c; animation-delay: calc(3 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(4) {grid-area: d; animation-delay: calc(4 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(5) {grid-area: e; animation-delay: calc(5 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(6) {grid-area: f; animation-delay: calc(6 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(7) {grid-area: g; animation-delay: calc(7 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(8) {grid-area: h; animation-delay: calc(8 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(9) {grid-area: i; animation-delay: calc(9 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(10) {grid-area: j; animation-delay: calc(10 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(11) {grid-area: k; animation-delay: calc(11 * var(--stagger-delay));}
.animated-grid .grid-item:nth-child(12) {grid-area: l; animation-delay: calc(12 * var(--stagger-delay));}
.animated-grid .grid-item:last-child {grid-area: ðŸ”¥; animation-delay: calc(13 * var(--stagger-delay));}